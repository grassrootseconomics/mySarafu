// Mocks generated by Mockito 5.2.0 from annotations
// in my_sarafu/test/logic/cubit/account_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_sarafu/repository/vault_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFlutterSecureStorage_0 extends _i1.Fake
    implements _i2.FlutterSecureStorage {}

/// A class which mocks [VaultRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVaultRepository extends _i1.Mock implements _i3.VaultRepository {
  MockVaultRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterSecureStorage get secureStorage => (super.noSuchMethod(
      Invocation.getter(#secureStorage),
      returnValue: _FakeFlutterSecureStorage_0()) as _i2.FlutterSecureStorage);
  @override
  _i4.Future<void> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> getSeed() =>
      (super.noSuchMethod(Invocation.method(#getSeed, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<String> setSeed(String? seed) =>
      (super.noSuchMethod(Invocation.method(#setSeed, [seed]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<void> deleteSeed() =>
      (super.noSuchMethod(Invocation.method(#deleteSeed, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> getEncryptionPhrase() =>
      (super.noSuchMethod(Invocation.method(#getEncryptionPhrase, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<String> writeEncryptionPhrase(String? secret) =>
      (super.noSuchMethod(Invocation.method(#writeEncryptionPhrase, [secret]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<void> deleteEncryptionPhrase() =>
      (super.noSuchMethod(Invocation.method(#deleteEncryptionPhrase, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> getPin() =>
      (super.noSuchMethod(Invocation.method(#getPin, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<String> writePin(String? pin) =>
      (super.noSuchMethod(Invocation.method(#writePin, [pin]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<void> deletePin() =>
      (super.noSuchMethod(Invocation.method(#deletePin, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setEncrypted(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setEncrypted, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> getSecret() =>
      (super.noSuchMethod(Invocation.method(#getSecret, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
}
